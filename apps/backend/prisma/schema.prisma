generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../../doc/database-erd.svg"
  theme    = "forest"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  username       String        @unique
  passwordHash   String
  firstName      String?
  lastName       String?
  bio            String?
  avatar         String?
  skillLevel     SkillLevel?
  preferences    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  groupMembers   GroupMember[]
  createdGroups  Group[]       @relation("GroupCreator")
  reservations   Reservation[]
  hostedSessions Session[]

  @@map("users")
}

model Session {
  id                String        @id @default(uuid())
  game              String
  title             String
  description       String?
  date              DateTime
  recurrenceRule    String?
  recurrenceEndDate DateTime?
  online            Boolean       @default(false)
  level             SessionLevel
  playersMax        Int           @default(4)
  playersCurrent    Int           @default(0)
  tagColor          TagColor      @default(GRAY)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  hostId            String
  locationId        String?
  reservations      Reservation[]
  host              User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  location          Location?     @relation(fields: [locationId], references: [id])

  @@index([date])
  @@index([hostId])
  @@index([game])
  @@map("sessions")
}

model Location {
  id           String       @id @default(uuid())
  name         String
  address      String?
  city         String
  type         LocationType
  rating       Float        @default(0)
  amenities    String[]
  capacity     Int?
  openingHours Json?
  icon         String       @default("store")
  lat          Float
  lon          Float
  website      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sessions     Session[]

  @@index([city])
  @@index([lat, lon])
  @@map("locations")
}

model Group {
  id          String        @id @default(uuid())
  name        String
  games       String[]
  location    String
  playstyle   Playstyle
  description String
  recruiting  Boolean       @default(true)
  isPublic    Boolean       @default(true)
  avatar      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String?
  members     GroupMember[]
  creator     User?         @relation("GroupCreator", fields: [creatorId], references: [id])
  polls       Poll[]

  @@map("groups")
}

model GroupMember {
  id       String    @id @default(uuid())
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  userId   String
  groupId  String
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Reservation {
  id        String            @id @default(uuid())
  status    ReservationStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  sessionId String
  userId    String
  session   Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([status])
  @@map("reservations")
}

model Poll {
  id        String   @id @default(uuid())
  title     String
  dates     String[]
  votes     Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("polls")
}

enum SkillLevel {
  BEGINNER     @map("Beginner")
  INTERMEDIATE @map("Intermediate")
  EXPERT       @map("Expert")
}

enum SessionLevel {
  BEGINNER     @map("Beginner")
  INTERMEDIATE @map("Intermediate")
  ADVANCED     @map("Advanced")
  OPEN         @map("Open to all")
}

enum ReservationStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
}

enum GroupRole {
  MEMBER @map("member")
  ADMIN  @map("admin")
}

enum LocationType {
  BAR              @map("Bar")
  CAFE             @map("Cafe")
  GAME_STORE       @map("Game Store")
  COMMUNITY_CENTER @map("Community Center")
  PRIVATE          @map("Private")
}

enum Playstyle {
  CASUAL       @map("Casual")
  COMPETITIVE  @map("Competitive")
  STORY_DRIVEN @map("Story-driven")
  SOCIAL       @map("Social")
}

enum TagColor {
  RED    @map("red")
  GREEN  @map("green")
  PURPLE @map("purple")
  BLUE   @map("blue")
  GRAY   @map("gray")
}
