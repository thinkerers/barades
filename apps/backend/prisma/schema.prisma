// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../../doc/database-erd.svg"
  theme    = "forest"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") //for clients requests
  directUrl = env("DIRECT_URL") //for the migrations
}

enum SkillLevel {
  BEGINNER     @map("Beginner")
  INTERMEDIATE @map("Intermediate")
  EXPERT       @map("Expert")
}

enum SessionLevel {
  BEGINNER     @map("Beginner")
  INTERMEDIATE @map("Intermediate")
  ADVANCED     @map("Advanced")
  OPEN         @map("Open to all")
}

enum ReservationStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
}

enum GroupRole {
  MEMBER @map("member")
  ADMIN  @map("admin")
}

enum LocationType {
  BAR              @map("Bar")
  CAFE             @map("Cafe")
  GAME_STORE       @map("Game Store")
  COMMUNITY_CENTER @map("Community Center")
  PRIVATE          @map("Private")
}

enum Playstyle {
  CASUAL       @map("Casual")
  COMPETITIVE  @map("Competitive")
  STORY_DRIVEN @map("Story-driven")
  SOCIAL       @map("Social")
}

enum TagColor {
  RED    @map("red")
  GREEN  @map("green")
  PURPLE @map("purple")
  BLUE   @map("blue")
  GRAY   @map("gray")
}

// ============================================
// 1. USER - Users (players, hosts)
// ============================================
model User {
  id          String      @id @default(uuid())
  email       String      @unique
  username    String      @unique
  password    String // Hashed with bcrypt
  bio         String?     @db.Text
  avatar      String?
  skillLevel  SkillLevel? // Preferred skill bracket for matchmaking
  preferences Json? // Store user preferences (notifications, favorite games, etc.)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  hostedSessions Session[] // Sessions created/organized by the user (as host)
  reservations   Reservation[] // Reservations made as participant
  groupMembers   GroupMember[] // Group memberships (via junction table)
  createdGroups  Group[]       @relation("GroupCreator") // Groups created by this user

  @@map("users")
}

// ============================================
// 2. SESSION - Games/Planned events
// ============================================
model Session {
  id                String       @id @default(uuid())
  game              String // Ex: "D&D 5e", "Catan", "Poker" --> could be an id from a games table in the future
  title             String
  description       String?      @db.Text
  date              DateTime
  recurrenceRule    String? // iCalendar RRULE format for recurring events (e.g., "FREQ=WEEKLY;BYDAY=TU")
  recurrenceEndDate DateTime? // End date for recurring events
  online            Boolean      @default(false)
  level             SessionLevel // Target skill level for the table
  playersMax        Int          @default(4)
  playersCurrent    Int          @default(0) // Managed via NestJS transactions; keep in sync with confirmed reservations
  tagColor          TagColor     @default(GRAY) // Visual category tag
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  hostId       String
  locationId   String? // Optional: physical location (if not online)
  host         User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  location     Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)
  reservations Reservation[]

  @@index([date])
  @@index([hostId])
  @@index([game])
  @@map("sessions")
}

// ============================================
// 3. LOCATION - Gaming venues
// ============================================
model Location {
  id           String       @id @default(uuid())
  name         String
  address      String? // Full address (optional)
  city         String
  type         LocationType // Venue category
  rating       Float        @default(0)
  amenities    String[] // ["WiFi", "Gaming Tables", "Food", "Drinks", "Parking", "Accessible"]
  capacity     Int? // Max capacity (optional)
  openingHours Json? // Store opening hours as JSON (e.g., {"monday": "10:00-22:00", ...})
  icon         String       @default("store") // Lucide icon name
  lat          Float // Latitude for Leaflet map
  lon          Float // Longitude
  website      String? // Venue website URL (optional)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  sessions Session[] // Sessions hosted at this location

  @@index([city])
  @@index([lat, lon])
  @@map("locations")
}

// ============================================
// 4. GROUP - Gaming groups/guilds
// ============================================
model Group {
  id          String    @id @default(uuid())
  name        String
  games       String[] // ["D&D 5e", "Pathfinder 2e", "Catan", "Poker"]
  location    String // City or "Online"
  playstyle   Playstyle // Preferred atmosphere during sessions
  description String    @db.Text
  recruiting  Boolean   @default(true)
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  creatorId String? // User who created the group (optional, for future "admin" logic)
  creator   User?         @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  members   GroupMember[]
  polls     Poll[]

  @@map("groups")
}

// ============================================
// 5. GROUP_MEMBER - Junction table User â†” Group
// ============================================
model GroupMember {
  id       String    @id @default(uuid())
  role     GroupRole @default(MEMBER) // Member permissions within the group
  joinedAt DateTime  @default(now())

  // Relations
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // A user can only join a group once
  @@map("group_members")
}

// ============================================
// 6. RESERVATION - Session reservations
// ============================================
model Reservation {
  id        String            @id @default(uuid())
  status    ReservationStatus @default(PENDING) // "pending", "confirmed", "cancelled"
  message   String?           @db.Text // Optional message from player to host
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  sessionId String
  userId    String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId]) // One reservation per user per session
  @@index([status])
  @@map("reservations")
}

// ============================================
// 7. POLL - Date polls (collaborative scheduling)
// ============================================
model Poll {
  id        String   @id @default(uuid())
  title     String
  dates     String[] // ["2025-10-15", "2025-10-16", "2025-10-18"]
  votes     Json     @default("{}") // {"2025-10-15": ["user1", "user2"], "2025-10-16": ["user1"]}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("polls")
}
